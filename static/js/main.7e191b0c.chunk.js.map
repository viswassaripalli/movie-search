{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","react_default","a","createElement","key","style","border","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","search","_this2","urlString","$","ajax","success","searchResults","console","log","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","row","error","xhr","status","err","event","target","className","placeholder","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","searchchangeHandler","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAkCeA,sLA5BX,IAAMC,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAOP,mCAIvB,OACEQ,EAAAC,EAAAC,cAAA,SAAOC,IAAKV,KAAKC,MAAMC,MAAMC,GAAIQ,MAAO,CAAEC,OAAQ,mBAChDL,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKI,IAAI,SAASC,MAAM,MAAMC,IAAKf,KAAKC,MAAMC,MAAMc,cAEtDT,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKT,KAAKC,MAAMC,MAAMe,OACtBV,EAAAC,EAAAC,cAAA,SAAIT,KAAKC,MAAMC,MAAMgB,UACrBX,EAAAC,EAAAC,cAAA,SACEU,KAAK,SACLC,QAASpB,KAAKqB,UAAUC,KAAKtB,MAC7BuB,MAAM,oBAtBCC,IAAMC,mCCuEdC,cAnEb,SAAAA,EAAYzB,GAAO,IAAA0B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA5B,KAAA0B,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA5B,KAAA4B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhC,KAAMC,KACDgC,MAAQ,GAEbN,EAAKO,cAAc,OAJFP,6EAOLQ,GAAQ,IAAAC,EAAApC,KACdqC,EACJ,2GACAF,EACA,8BACFG,IAAEC,KAAK,CACLxC,IAAKsC,EACLG,QAAS,SAAAC,GACPC,QAAQC,IAAI,WACZ,IAAMC,EAAUH,EAAcG,QAC1BC,EAAY,GAChBD,EAAQE,QAAQ,SAAA5C,GACdwC,QAAQC,IAAIzC,EAAM6C,aAClB7C,EAAMc,WACJ,kCAAoCd,EAAM6C,YAC5C,IAAMC,EAAWzC,EAAAC,EAAAC,cAACwC,EAAD,CAAU/C,MAAOA,IAClC2C,EAAUK,KAAKF,KAEjBZ,EAAKe,SAAS,CAAEC,IAAKP,KAEvBQ,MAAO,SAACC,EAAKC,EAAQC,GAAd,OAAsBd,QAAQW,MAAM,kEAG3BI,GAClBf,QAAQC,IAAIc,EAAMC,OAAOnC,OACLvB,KACRkC,cAAcuB,EAAMC,OAAOnC,wCAGvC,OACEhB,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,OACbpD,EAAAC,EAAAC,cAAA,SAAOkD,UAAU,YACfpD,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKI,IAAI,WAAWC,MAAM,KAAKC,IAAI,cAErCR,EAAAC,EAAAC,cAAA,MAAIK,MAAM,MACVP,EAAAC,EAAAC,cAAA,yBAINF,EAAAC,EAAAC,cAAA,SACEmD,YAAY,SACZjD,MAAO,CACLkD,SAAU,GACVC,QAAS,QACThD,MAAO,MACPiD,WAAY,GACZC,cAAe,EACfC,YAAa,IAEfC,SAAUlE,KAAKmE,oBAAoB7C,KAAKtB,QAEzCA,KAAKiC,MAAMmB,YA9DF3B,aCOE2C,QACW,cAA7BhE,OAAOC,SAASgE,UAEe,UAA7BjE,OAAOC,SAASgE,UAEhBjE,OAAOC,SAASgE,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e191b0c.chunk.js","sourcesContent":["import React from \"react\";\n\nclass MovieRow extends React.Component {\n  viewMovie() {\n    // console.log(\"Trying to view movie\")\n    // console.log(this.props.movie.title)\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id;\n    window.location.href = url;\n  }\n\n  render() {\n    return (\n      <table key={this.props.movie.id} style={{ border: \"2px solidblack\" }}>\n        <tbody>\n          <tr>\n            <td>\n              <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src} />\n            </td>\n            <td>\n              <h3>{this.props.movie.title}</h3>\n              <p>{this.props.movie.overview}</p>\n              <input\n                type=\"button\"\n                onClick={this.viewMovie.bind(this)}\n                value=\"View\"\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default MovieRow;\n","import React, { Component } from \"react\";\nimport MovieRow from \"./MovieRow.js\";\nimport \"./App.css\";\nimport $ from \"jquery\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.performSearch(\"ant\");\n  }\n\n  performSearch(search) {\n    const urlString =\n      \"https://api.themoviedb.org/3/search/movie?api_key=c445fe1b184998da434a74f867259d8e&language=en-US&query=\" +\n      search +\n      \"&page=1&include_adult=false\";\n    $.ajax({\n      url: urlString,\n      success: searchResults => {\n        console.log(\"success\");\n        const results = searchResults.results;\n        var movieRows = [];\n        results.forEach(movie => {\n          console.log(movie.poster_path);\n          movie.poster_src =\n            \"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\n          const movieRow = <MovieRow movie={movie} />;\n          movieRows.push(movieRow);\n        });\n        this.setState({ row: movieRows });\n      },\n      error: (xhr, status, err) => console.error(\"failed to fetch\")\n    });\n  }\n  searchchangeHandler(event) {\n    console.log(event.target.value);\n    const boundObject = this;\n    boundObject.performSearch(event.target.value);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <table className=\"titlebar\">\n          <tbody>\n            <tr>\n              <td>\n                <img alt=\"app-logo\" width=\"50\" src=\"logo.png\" />\n              </td>\n              <td width=\"8\" />\n              <td>MovieDB </td>\n            </tr>\n          </tbody>\n        </table>\n        <input\n          placeholder=\"search\"\n          style={{\n            fontSize: 24,\n            display: \"block\",\n            width: \"99%\",\n            paddingTop: 10,\n            paddingBottom: 8,\n            paddingLeft: 16\n          }}\n          onChange={this.searchchangeHandler.bind(this)}\n        />\n        {this.state.row}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}